// <auto-generated />
using System;
using MathComps.Domain.EfCoreEntities;
using MathComps.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace MathComps.Infrastructure.Migrations
{
    [DbContext(typeof(MathCompsDbContext))]
    [Migration("20251012162347_AddTaggingMetadataToProblemTag")]
    partial class AddTaggingMetadataToProblemTag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "tag_type", new[] { "area", "goal", "technique", "type" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ux_author_slug");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ux_category_slug");

                    b.HasIndex("SortOrder")
                        .IsUnique()
                        .HasDatabaseName("ux_category_sort_order");

                    b.ToTable("categories", null, t =>
                        {
                            t.HasCheckConstraint("ck_category_sort_order_positive", "\"sort_order\" > 0");
                        });
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_competitions");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ux_competition_slug");

                    b.HasIndex("SortOrder")
                        .IsUnique()
                        .HasDatabaseName("ux_competition_sort_order");

                    b.ToTable("competitions", null, t =>
                        {
                            t.HasCheckConstraint("ck_competition_sort_order_positive", "\"sort_order\" > 0");
                        });
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<Guid>("RoundInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("round_instance_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<string>("Solution")
                        .HasColumnType("text")
                        .HasColumnName("solution");

                    b.Property<Vector>("SolutionEmbedding")
                        .HasColumnType("vector(768)")
                        .HasColumnName("solution_embedding");

                    b.Property<string>("SolutionLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("solution_link");

                    b.Property<string>("SolutionParsed")
                        .HasColumnType("jsonb")
                        .HasColumnName("solution_parsed");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statement");

                    b.Property<Vector>("StatementEmbedding")
                        .HasColumnType("vector(768)")
                        .HasColumnName("statement_embedding");

                    b.Property<string>("StatementParsed")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("statement_parsed");

                    b.HasKey("Id")
                        .HasName("pk_problems");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_problems_category_id");

                    b.HasIndex("Solution")
                        .HasDatabaseName("ix_problem_solution_trgm")
                        .HasFilter("solution IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Solution"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Solution"), new[] { "gin_trgm_ops" });

                    b.HasIndex("SolutionEmbedding")
                        .HasDatabaseName("ix_problem_solution_embedding_cosine")
                        .HasFilter("solution_embedding IS NOT NULL")
                        .HasAnnotation("Npgsql:StorageParameter:lists", 100);

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SolutionEmbedding"), "ivfflat");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("SolutionEmbedding"), new[] { "vector_cosine_ops" });

                    b.HasIndex("Statement")
                        .HasDatabaseName("ix_problem_statement_trgm")
                        .HasFilter("statement IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Statement"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Statement"), new[] { "gin_trgm_ops" });

                    b.HasIndex("StatementEmbedding")
                        .HasDatabaseName("ix_problem_statement_embedding_cosine")
                        .HasFilter("statement_embedding IS NOT NULL")
                        .HasAnnotation("Npgsql:StorageParameter:lists", 100);

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("StatementEmbedding"), "ivfflat");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("StatementEmbedding"), new[] { "vector_cosine_ops" });

                    b.HasIndex("RoundInstanceId", "Number")
                        .IsUnique()
                        .HasDatabaseName("ux_problem_round_instance_number");

                    b.ToTable("problems", null, t =>
                        {
                            t.HasCheckConstraint("ck_problem_number_positive", "\"number\" > 0");
                        });
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.ProblemAuthor", b =>
                {
                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer")
                        .HasColumnName("ordinal");

                    b.HasKey("ProblemId", "AuthorId")
                        .HasName("pk_problem_authors");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_problem_author_author_id");

                    b.HasIndex("ProblemId", "Ordinal")
                        .IsUnique()
                        .HasDatabaseName("ux_problem_author_problem_ordinal");

                    b.ToTable("problem_authors", null, t =>
                        {
                            t.HasCheckConstraint("ck_problem_author_order_positive", "\"ordinal\" > 0");
                        });
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.ProblemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_id");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("height");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<decimal>("Scale")
                        .HasColumnType("numeric")
                        .HasColumnName("scale");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_problem_images");

                    b.HasIndex("ProblemId", "ContentId")
                        .IsUnique()
                        .HasDatabaseName("ux_problem_image_problem_content_id");

                    b.ToTable("problem_images", (string)null);
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.ProblemSimilarity", b =>
                {
                    b.Property<Guid>("SourceProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_problem_id");

                    b.Property<Guid>("SimilarProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("similar_problem_id");

                    b.Property<double>("SimilarityScore")
                        .HasColumnType("double precision")
                        .HasColumnName("similarity_score");

                    b.HasKey("SourceProblemId", "SimilarProblemId")
                        .HasName("pk_problem_similarities");

                    b.HasIndex("SimilarProblemId")
                        .HasDatabaseName("ix_problem_similarity_similar_problem_id");

                    b.ToTable("problem_similarities", null, t =>
                        {
                            t.HasCheckConstraint("ck_problem_similarity_not_self", "\"source_problem_id\" <> \"similar_problem_id\"");
                        });
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.ProblemTag", b =>
                {
                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid")
                        .HasColumnName("problem_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<int?>("Confidence")
                        .HasColumnType("integer")
                        .HasColumnName("confidence");

                    b.Property<float?>("GoodnessOfFit")
                        .HasColumnType("real")
                        .HasColumnName("goodness_of_fit");

                    b.Property<string>("Justification")
                        .HasColumnType("text")
                        .HasColumnName("justification");

                    b.HasKey("ProblemId", "TagId")
                        .HasName("pk_problem_tag");

                    b.HasIndex("ProblemId")
                        .HasDatabaseName("ix_problem_tag_problem_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_problem_tag_tag_id");

                    b.ToTable("problem_tag", (string)null);
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("competition_id");

                    b.Property<string>("CompositeSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("composite_slug");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_rounds");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_rounds_category_id");

                    b.HasIndex("CompositeSlug")
                        .IsUnique()
                        .HasDatabaseName("ux_round_composite_slug");

                    b.HasIndex("CompetitionId", "SortOrder")
                        .IsUnique()
                        .HasDatabaseName("ux_round_competition_category_sort_order_when_category_null")
                        .HasFilter("\"category_id\" IS NULL");

                    b.HasIndex("CompetitionId", "CategoryId", "Slug")
                        .IsUnique()
                        .HasDatabaseName("ux_round_competition_category_slug");

                    b.HasIndex("CompetitionId", "CategoryId", "SortOrder")
                        .IsUnique()
                        .HasDatabaseName("ux_round_competition_category_sort_order_when_category_not_null")
                        .HasFilter("\"category_id\" IS NOT NULL");

                    b.ToTable("rounds", null, t =>
                        {
                            t.HasCheckConstraint("ck_round_sort_order_positive", "\"sort_order\" > 0");
                        });
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.RoundInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uuid")
                        .HasColumnName("round_id");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.HasKey("Id")
                        .HasName("pk_round_instances");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_round_instances_season_id");

                    b.HasIndex("RoundId", "SeasonId")
                        .IsUnique()
                        .HasDatabaseName("ux_round_instance_round_season");

                    b.ToTable("round_instances", (string)null);
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("EditionLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("edition_label");

                    b.Property<int>("EditionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("edition_number");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer")
                        .HasColumnName("start_year");

                    b.HasKey("Id")
                        .HasName("pk_seasons");

                    b.HasIndex("EditionNumber")
                        .IsUnique()
                        .HasDatabaseName("ux_season_edition_number");

                    b.HasIndex("StartYear")
                        .IsUnique()
                        .HasDatabaseName("ux_season_start_year");

                    b.ToTable("seasons", null, t =>
                        {
                            t.HasCheckConstraint("ck_season_edition_positive", "\"edition_number\" > 0");

                            t.HasCheckConstraint("ck_season_start_year_sane", "\"start_year\" >= 1900");
                        });
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<TagType>("TagType")
                        .HasColumnType("tag_type")
                        .HasColumnName("tag_type");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ux_tag_slug");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Problem", b =>
                {
                    b.HasOne("MathComps.Domain.EfCoreEntities.Category", null)
                        .WithMany("Problems")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_problems_categories_category_id");

                    b.HasOne("MathComps.Domain.EfCoreEntities.RoundInstance", "RoundInstance")
                        .WithMany("Problems")
                        .HasForeignKey("RoundInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problems_round_instances_round_instance_id");

                    b.Navigation("RoundInstance");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.ProblemAuthor", b =>
                {
                    b.HasOne("MathComps.Domain.EfCoreEntities.Author", "Author")
                        .WithMany("ProblemAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_problem_authors_authors_author_id");

                    b.HasOne("MathComps.Domain.EfCoreEntities.Problem", "Problem")
                        .WithMany("ProblemAuthors")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_authors_problems_problem_id");

                    b.Navigation("Author");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.ProblemImage", b =>
                {
                    b.HasOne("MathComps.Domain.EfCoreEntities.Problem", "Problem")
                        .WithMany("Images")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_images_problems_problem_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.ProblemSimilarity", b =>
                {
                    b.HasOne("MathComps.Domain.EfCoreEntities.Problem", "SimilarProblem")
                        .WithMany("AppearsInProblems")
                        .HasForeignKey("SimilarProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_similarities_problems_similar_problem_id");

                    b.HasOne("MathComps.Domain.EfCoreEntities.Problem", "SourceProblem")
                        .WithMany("SimilarProblems")
                        .HasForeignKey("SourceProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_similarities_problems_source_problem_id");

                    b.OwnsOne("MathComps.Domain.SimilarityComponents", "Components", b1 =>
                        {
                            b1.Property<Guid>("ProblemSimilaritySourceProblemId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ProblemSimilaritySimilarProblemId")
                                .HasColumnType("uuid");

                            b1.Property<double>("CompetitionSimilarity")
                                .HasColumnType("double precision");

                            b1.Property<double?>("SolutionSimilarity")
                                .HasColumnType("double precision");

                            b1.Property<double>("StatementSimilarity")
                                .HasColumnType("double precision");

                            b1.Property<double>("TagSimilarity")
                                .HasColumnType("double precision");

                            b1.HasKey("ProblemSimilaritySourceProblemId", "ProblemSimilaritySimilarProblemId");

                            b1.ToTable("problem_similarities");

                            b1.ToJson("components");

                            b1.WithOwner()
                                .HasForeignKey("ProblemSimilaritySourceProblemId", "ProblemSimilaritySimilarProblemId")
                                .HasConstraintName("fk_problem_similarities_problem_similarities_source_problem_id");
                        });

                    b.Navigation("Components");

                    b.Navigation("SimilarProblem");

                    b.Navigation("SourceProblem");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.ProblemTag", b =>
                {
                    b.HasOne("MathComps.Domain.EfCoreEntities.Problem", "Problem")
                        .WithMany("ProblemTags")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_problem_tag_problems_problem_id");

                    b.HasOne("MathComps.Domain.EfCoreEntities.Tag", "Tag")
                        .WithMany("ProblemTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_problem_tag_tags_tag_id");

                    b.Navigation("Problem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Round", b =>
                {
                    b.HasOne("MathComps.Domain.EfCoreEntities.Category", "Category")
                        .WithMany("Rounds")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_rounds_categories_category_id");

                    b.HasOne("MathComps.Domain.EfCoreEntities.Competition", "Competition")
                        .WithMany("Rounds")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rounds_competitions_competition_id");

                    b.Navigation("Category");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.RoundInstance", b =>
                {
                    b.HasOne("MathComps.Domain.EfCoreEntities.Round", "Round")
                        .WithMany("RoundInstances")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_round_instances_rounds_round_id");

                    b.HasOne("MathComps.Domain.EfCoreEntities.Season", "Season")
                        .WithMany("RoundInstances")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_round_instances_seasons_season_id");

                    b.Navigation("Round");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Author", b =>
                {
                    b.Navigation("ProblemAuthors");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Category", b =>
                {
                    b.Navigation("Problems");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Competition", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Problem", b =>
                {
                    b.Navigation("AppearsInProblems");

                    b.Navigation("Images");

                    b.Navigation("ProblemAuthors");

                    b.Navigation("ProblemTags");

                    b.Navigation("SimilarProblems");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Round", b =>
                {
                    b.Navigation("RoundInstances");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.RoundInstance", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Season", b =>
                {
                    b.Navigation("RoundInstances");
                });

            modelBuilder.Entity("MathComps.Domain.EfCoreEntities.Tag", b =>
                {
                    b.Navigation("ProblemTags");
                });
#pragma warning restore 612, 618
        }
    }
}
